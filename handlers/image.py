import logging
import requests
import sympy as sp
import os
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from services.mistral_api import get_mistral_response  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mistral API

logger = logging.getLogger(__name__)

async def solve_math_from_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OCR.space –∏ —Ä–µ—à–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏."""
    if not update.message.photo:
        await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        photo_file = await update.message.photo[-1].get_file()
        image_data = await photo_file.download_as_bytearray()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã OCR.space API
        api_key = os.getenv("OCR_SPACE_API_KEY")
        url = "https://api.ocr.space/parse/image"
        headers = {"apikey": api_key}
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º MIME-—Ç–∏–ø–∞
        files = {"file": ("math_task.jpg", bytes(image_data), "image/jpeg")}
        payload = {
            "language": "rus",  # –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
            "isOverlayRequired": False,
            "filetype": "JPG",
            "detectOrientation": True
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, files=files, data=payload, headers=headers)
        response.raise_for_status()
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if "ParsedResults" not in data or not data["ParsedResults"]:
            error_message = data.get("ErrorMessage", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OCR")
            logger.error(f"–û—à–∏–±–∫–∞ OCR: {error_message}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {error_message}")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        parsed_result = data["ParsedResults"][0]
        text = parsed_result.get("ParsedText", "").strip()

        if not text:
            await update.message.reply_text("üîç –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ç–∫–æ–µ.")
            return

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é sympy
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
            equation = text.replace(" ", "").replace(",", ".")
            if "=" not in equation:
                raise ValueError("–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞–∫ '='")

            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏
            left, right = equation.split("=", 1)
            expr = sp.sympify(f"({left}) - ({right})")
            
            # –†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
            x = sp.symbols("x")
            solution = sp.solve(expr, x)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = f"‚úÖ *–†–µ—à–µ–Ω–∏–µ:*\n`x = {solution}`"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ sympy –Ω–µ —Å–º–æ–≥ —Ä–µ—à–∏—Ç—å, –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Mistral API
            try:
                mistral_response = get_mistral_response(
                    f"–†–µ—à–∏ –∑–∞–¥–∞—á—É: {text}. –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
                )
                response_text = f"ü§ñ *–û—Ç–≤–µ—Ç:*\n{mistral_response}"
            except Exception as mistral_error:
                logger.error(f"–û—à–∏–±–∫–∞ Mistral API: {mistral_error}")
                response_text = (
                    "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É.\n"
                    "_–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ._"
                )

        await update.message.reply_text(response_text, parse_mode="Markdown")

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OCR.space: {str(e)}")
        await update.message.reply_text("üîß –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
handler = MessageHandler(filters.PHOTO, solve_math_from_image)